// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeDensity
#pragma kernel ComputePGandVL
#pragma kernel ComputePosAndVel

//TODO: for debugging - makes performance way worse!
#pragma enable_d3d11_debug_symbols

// Number of threads per thread group. Should match with the CPU code invoking this!
#define ThreadGroupSize 64

#define MaxNumParticles 16384

#define PI 3.14159265
// The kernel's finite support. Note that the support radius is 2*KernelSupport (goes exactly to 0 at +- radius).
// 0.5 gives the kernel as shown in the diagram in textbook p 289
#define KernelSupport 0.5
#define sInv (1 / KernelSupport)

//TODO: pay attention to timestep!!! Should be defined by unity?
#define Timestep 0.001f ///////////~~~~~~~~~~~~~~~~~~~~~~~~

// Just for CFL condition? 
#define ParticleDiameter 0.02f

// CFL condition (from Ihmsen 2014): timestep <= 0.4 * particle_diameter / max_speed.
// The CFL condition says that the max speed is <= some factor (0.4) times the particle diameter per timestep.
#define MaxParticleSpeed 1.0f /* <-- if 1, equals max speed. Can be less */* 0.4f * ParticleDiameter / Timestep

//	https://docs.unity3d.com/Manual/SL-PlatformDifferences.html "Using buffers with GPU buffers"

struct ParticleData
{
	float3 position;
	float3 velocity;
};

// For debugging. Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWTexture3D<float4> Result;

float3 _ExternalAccelerations;
float _DeltaTime;				//TODO: using Timestep for now!!
int _NumParticles;
half _ParticleMass;
half _Viscosity;
half _PressureStiffness;
half _ReferenceDensity;
// Magnitude of force due to gravity, and all other external accelerations. Note: when applying a force to a single particle, 
//	need to scale by the particle's local density! text p. 288

StructuredBuffer<ParticleData> _DataInputBuffer : register(t1);
StructuredBuffer<float3> _AccelerationInputBuffer : register(t2);

RWStructuredBuffer<ParticleData> _DataOutputBuffer: register(u1);
RWStructuredBuffer<float3> _AccelerationOutputBuffer : register(u2);

// Data buffers for interim calculations
RWStructuredBuffer<float> D : register(u3); // density
RWStructuredBuffer<float3> PG : register(u4); // pressure grad
RWStructuredBuffer<float3> VL : register(u5); // velocity lap

// Assume total shared memory of 16KB. Across 64 threads is 250 bytes per thread. Across 128 threads is 125B.

// Acceleration outputs

//TODO: is there a max of about 16000 particles? Because of groupshared memory limit and float3 size
//	maybe unless we do calculations for more than one particle per thread!

// The kernel function varies with distance from the center. If xi is the position of particle i and 
//  x is some point in space, r=x-xi is the distance between them.
//TODO: optimizations: branchless, precompute formula, MAD
float Kernel(float r)
{
    // Textbook pg 289
	float rOverS = r * sInv;
	
	// 1 / (pi*s^3)
	//float piFactor = pow(sInv, 3) / 3.1415;
	float piFactor = 1 / (PI * pow(KernelSupport, 3));
    
	if (rOverS < 0 || rOverS > 2)
		return 0;
	else if (rOverS <= 1)
        // Between 0 <= r/s <= 1
		return piFactor * (1 - 1.5 * pow(rOverS, 2) + 0.75 * pow(rOverS, 3));
	else //if (rOverS <= 2)
		// Between 1 <= r/s <= 2
		return piFactor * (0.25 * pow(2 - rOverS, 3));
    
}
float KernelDerivative(float r)
{
	float rOverS = r * sInv;
	float piFactor = 1 / (PI * pow(KernelSupport, 4));

	if (rOverS < 0 || rOverS > 2)
		return 0;
	else if (rOverS <= 1)
        // Between 0 <= r/s <= 1
		return piFactor * 3 * rOverS * mad(0.75, rOverS, -1);
	else //if (rOverS <= 2)
		// Between 1 <= r/s <= 2
		return piFactor * (-0.75 * pow(2 - rOverS, 2));
}
float KernelSecondDerivative(float r)
{
	float rOverS = r * sInv;
	float piFactor = 1 / (PI * pow(KernelSupport, 5));

	if (rOverS < 0 || rOverS > 2)
		return 0;
	else if (rOverS <= 1)
        // Between 0 <= r/s <= 1
		return piFactor * 3 * mad(1.5, rOverS, -1);
	else //if (rOverS <= 2)
		// Between 1 <= r/s <= 2
		return piFactor * mad(1.5, -rOverS, 3); // (3/2)*(2 - rOverS) = 3 - 1.5*rOverS
}

float3 KernelGradient(float3 r)
{
	// METHOD 1: The one that is probably right
	float x = KernelDerivative(r.x);
	float y = KernelDerivative(r.y);
	float z = KernelDerivative(r.z);
	return float3(x, y, z);
	
	// METHOD 2: The one that I thought should be right
	/*
	float rLen = length(r);
	// Make sure no divide by zero if it's far away
	if (rLen * rLen < 1.0e-10)
	{
		return float3(0, 0, 0);
	}
	else
	{
		float3 dir = normalize(r);
		float mag = KernelDerivative(rLen);
		return mag * saturate(dir);
	}*/

	///// NaNs :(
	//float3 dir = float3(1, 0, 0); //saturate(normalize(r) + float3(.1, 1, .1));
	//float mag = KernelDerivative(1);
	//return float3(0.5, 0, 0); //mag * dir;

}
float3 KernelLaplacian(float3 r)
{
	// METHOD 1: The one that is probably right
	float x = KernelSecondDerivative(r.x);
	float y = KernelSecondDerivative(r.y);
	float z = KernelSecondDerivative(r.z);
	return float3(x, y, z);
	
	// METHOD 2: The one that I thought should be right
	//float3 dir = normalize(r);
	//float mag = KernelSecondDerivative(length(r));
	//return mag * dir;
}

// For testing - writing to output texture2d or 3d
uint2 flatTo2D(uint1 val, int w)
{
	return uint2(fmod(val, w), floor(val / w));
}
uint3 flatTo3D(uint1 val, int w, int h)
{
	return uint3(fmod(val, w), fmod(val / w, h), floor(val / (w * h)));
}

void TestOutput(uint3 id)
{
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);

	// Gives a value between 0 and 2.5, normalize to 0 to 1
	//float k = Kernel(distance(id.xy, uint2(128, 128)));
	//Result[id.xy] = float4(k, k, k, 1);
	
	//Result[id.xy] = float4(k, k, k, 1);
	
	float w = MaxNumParticles;
	//uint2 id2D = uint2(fmod(id.x, w), floor(id.x / w));
	//Result[id2D.xy] = float4(id2D.x & id2D.y, (id2D.x & 15) / 15.0, (id2D.y & 15) / 15.0, 0.0) * _ParticleMass;
	
	uint3 id3D = flatTo3D(id.x, w, w);
	//Result[id3D] = float4(1.0f, 0.0f, 0.0f, 1.0f);

	//Result[id3D.xyz] = float4(id3D.x & id3D.y & id3D.z, (id3D.x & 15) / 15.0, (id3D.y & 15) / 15.0, 0.0) * _ParticleMass;
}


// numthreads(x,y,z) declares that each thread group is a grid of x*y*z threads. A multiple of 64 threads is a good number bc the thread warp size is either 32 or 64 depending on gpu.
[numthreads(ThreadGroupSize, 1, 1)]

// SV_GroupID: 3d ID of this thread group; range depends on Dispatch call
// SV_GroupThreadID: 3d ID of thread in its group; range depends on numthreads
// SV_GroupIndex: the flattened version of SV_GroupThreadID; index of a thread within its group
// SV_DispatchThreadID = SV_GroupID * numthreads + SV_GroupThreadID. For 1d numthreads, id.x represents one unit of calculation (one particle)
void ComputeDensity(uint3 id : SV_DispatchThreadID)
{
	ParticleData thisData = _DataInputBuffer[id.x];
	float3 thisPos = thisData.position;
	
	float thisDensity = 0;
	
	// Loop through all (TODO: nearby) particles to calculate this particle's density
	for (int i = 0; i < _NumParticles; i++)
	{
		//if ((uint) i == id.x)
		//	continue;
		
		ParticleData otherData = _DataInputBuffer[i];
		float3 otherPos = otherData.position;
		float dist = distance(thisPos, otherPos);
		float kernelVal = Kernel(dist);

		// Formula for particle density
		thisDensity += _ParticleMass * kernelVal;
	}
	D[id.x] = thisDensity;
}

[numthreads(ThreadGroupSize, 1, 1)]
void ComputePGandVL(uint3 id : SV_DispatchThreadID)
{
	// Calculate pressure gradients and the laplacians - these don't rely on each other so they can be done at the same time
	ParticleData thisData = _DataInputBuffer[id.x];
	float3 thisPos = thisData.position;
	float3 thisVel = thisData.velocity;
	
	float thisDensity = D[id.x];
	float thisPressure = _PressureStiffness * (thisDensity - _ReferenceDensity);
	
	float3 resultingPG = float3(0, 0, 0);
	float3 resultingVL = float3(0, 0, 0);

	[loop]
	for (int i = 0; i < _NumParticles; i++)
	{
		//if ((uint) i == id.x)
		//	continue;
		
		// Pressure gradient
		ParticleData otherData = _DataInputBuffer[i];
		float otherDensity = D[i];
		float otherPressure = _PressureStiffness * (otherDensity - _ReferenceDensity);
		
		float3 dist = thisPos - otherData.position;
		float3 kernelGrad = KernelGradient(dist);
		
		//TODO: trying to solve problem of zero density when outside range of influence of other particles
		//if (length(kernelGrad) <= 0.0001)
		//{
			// They should actually be 0 because KernelGradient explicitly returns 0
			// Add no contribution from this particle (it's not nearby). This isn't an optimization, it's a way to avoid undefined calculations (0 density on denom)

		//	  continue;
		//}
		
		//TODO: problem!!!! Density can be 0!!!!! Because the kernel can be 0!???
		float thisInvDensity = 1 / thisDensity;
		float otherInvDensity = 1 / otherDensity;
		
		float thisPressureOverSquaredDensity = thisPressure * thisInvDensity * thisInvDensity;

		float otherPressureOverSquaredDensity = otherPressure * otherInvDensity * otherInvDensity;

		// Formula for pressure gradient 
		resultingPG += (thisPressureOverSquaredDensity + otherPressureOverSquaredDensity) * kernelGrad;

		// Laplacian
		float3 kernelLap = KernelLaplacian(dist);
		float3 otherVel = otherData.velocity;
		
		// Formula for velocity laplacian
		resultingVL += (otherVel - thisVel) * thisInvDensity * kernelLap;
	}
	
	// Can pull out mass from sums because it's constant
	PG[id.x] = _ParticleMass * resultingPG;
	// (diffusion actually, since the viscosity term is baked in here)
	VL[id.x] = _Viscosity * _ParticleMass * resultingVL;
}

/*
[numthreads(ThreadGroupSize, 1, 1)]
void ComputeAcceleration(uint3 id : SV_DispatchThreadID, uint groupIdx : SV_GroupIndex, uint3 gid : SV_GroupID)
{
	// Position of this particle
	ParticleData thisData = _DataInputBuffer[id.x];
	float3 thisPos = thisData.position;
	float3 thisVel = thisData.velocity;
	
	// Loop through all (TODO: nearby) particles to calculate this particle's density
	int i = 0;
	for (i = 0; i < _NumParticles; i++)
	{
		ParticleData otherData = _DataInputBuffer[i];
		float3 otherPos = otherData.position;
		float dist = distance(thisPos, otherPos);
		float kernelVal = Kernel(dist);

		//particleKernel[id.x] = kernelVal;
		// Formula for particle density
		D[id.x] = _ParticleMass * kernelVal;
	}
	
	AllMemoryBarrierWithGroupSync();
	
	// Calculate pressure of all particles
	float thisDensity = D[id.x];
	[loop]
	for (i = 0; i < _NumParticles; i++)
	{
		// Formula for particle pressure
		float otherDensity = D[i];
		P[id.x] = _PressureStiffness * (otherDensity - thisDensity);

	}
	AllMemoryBarrierWithGroupSync();
	
	float thisPressure = P[id.x];
	 
	// Calculate pressure gradients and the laplacians - these don't rely on each other so they can be done at the same time
	[loop]
	for (i = 0; i < _NumParticles; i++)
	{
		// Pressure gradient
		ParticleData otherData = _DataInputBuffer[i];
		float otherPressure = P[i];
		float otherDensity = D[i];
		
		float3 dist = thisPos - otherData.position;
		float3 kernelGrad = KernelGradient(dist);
		
		float thisInvDensity = 1 / thisDensity;
		float otherInvDensity = 1 / otherDensity;
		
		float thisPressureOverSquaredDensity = thisPressure * thisInvDensity * thisInvDensity;

		float otherPressureOverSquaredDensity = otherPressure * otherInvDensity * otherInvDensity;

		// Formula for pressure gradient
		PG[id.x] = _ParticleMass * (thisPressureOverSquaredDensity + otherPressureOverSquaredDensity) * kernelGrad;

		// Laplacian
		
		float3 kernelLap = KernelLaplacian(dist);
		float3 otherVel = otherData.velocity;
		
		// Formula for laplacian
		VL[id.x] = _ParticleMass * (otherVel - thisVel) * thisInvDensity * kernelLap;
	}
	AllMemoryBarrierWithGroupSync();

	// Finally, write to the output!
	//TODO: viscosity coefficient
	float3 thisPG = PG[id.x];
	float3 thisVL = VL[id.x];
	_AccelerationOutputBuffer[id.x] = -thisPG + thisVL + _ExternalAccelerations;
	
}
*/

// Clamp given float3 to have length at most MaxParticleSpeed
//TODO: this doesn't seem to work as expected yet
float3 speedLimit(float3 v)
{
	float mag = length(v);
	//float3 norm = v / mag;
	float3 norm = normalize(v);
	// Clamp between 0 and max speed
	float newMag = saturate(mag) * MaxParticleSpeed;
	
	return newMag * norm;
}

[numthreads(ThreadGroupSize, 1, 1)]
void ComputePosAndVel(uint3 id : SV_DispatchThreadID, uint groupIdx : SV_GroupIndex, uint3 gid : SV_GroupID)
{
	
	//uint3 id3D = flatTo3D(id.x, MaxNumParticles, MaxNumParticles);
	//float4 tmp = float4(particlePos, 1);
	//Result[id3D] = tmp;
	
	float3 thisPG = PG[id.x];
	float3 thisVL = VL[id.x];
	
	float3 forcesOnThis = -thisPG + thisVL + _ExternalAccelerations;
	
	// Use symplectic euler to update position and velocity
	ParticleData oldData = _DataInputBuffer[id.x];
	float3 oldPos = oldData.position;
	float3 oldVel = oldData.velocity;
	
	// Symplectic euler with a = F/m
	float3 newVel = oldVel + Timestep * forcesOnThis / _ParticleMass;
	float3 newPos = oldPos + newVel * Timestep;

	ParticleData data;
	data.position = newPos;
	data.velocity = speedLimit(newVel);
	//data.velocity = newVel;
	
	_DataOutputBuffer[id.x] = data;
}