// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeDensity
#pragma kernel ComputePGandVL
#pragma kernel ComputePosAndVel

//TODO: for debugging - makes performance way worse!
#pragma enable_d3d11_debug_symbols

// Number of threads per thread group. Should match with the CPU code invoking this!
#define ThreadGroupSize 64
//#define MaxNumParticles 16384

#define PI 3.14159265
#define FLOAT_EPSILON 1.0e-10
// The kernel's finite support. Note that the support radius is 2*KernelSupport (goes exactly to 0 at +- radius).
// 0.5 gives the kernel as shown in the diagram in textbook p 289
#define KernelSupport 0.5
#define sInv (1 / KernelSupport)

//TODO: pay attention to timestep!!! Should be defined by unity?
#define Timestep 0.03f ///////////~~~~~~~~~~~~~~~~~~~~~~~~

// Just for CFL condition? 
#define ParticleDiameter 0.001f

// CFL condition (from Ihmsen 2014): timestep <= 0.4 * particle_diameter / max_speed.
// The CFL condition says that the max speed is <= some factor (0.4) times the particle diameter per timestep.
#define MaxParticleSpeed 0.4f * ParticleDiameter / Timestep

//	https://docs.unity3d.com/Manual/SL-PlatformDifferences.html "Using buffers with GPU buffers"

// Includes interim calculation data because we need a buffer the size of the number of particles
struct ParticleDataIn
{
	float3 position;
	float3 velocity;

	// interim calculation data
	float3 _pressureGradient;
	float3 _diffusion;
	float _density;
	float _temperatureDiffusion;

	// HLSL wants float3s before floats. This is not interim data
	float temperature;
};

struct ParticleDataOut
{
	float3 position;
	float3 velocity;
	float temperature;
};

float3 _ExternalAccelerations;
float _DeltaTime; //TODO: using Timestep for now!!
int _NumParticles;
half _ParticleMass;
half _Viscosity;
half _PressureStiffness;
half _ReferenceDensity;
half _AmbientTemperature;
half _HeatDiffusionRate;
// Note: when applying a force to a single particle, need to scale by the particle's local density! text p. 288

RWStructuredBuffer<ParticleDataIn> _DataInputBuffer : register(u1);
StructuredBuffer<float3> _AccelerationInputBuffer : register(t1);

RWStructuredBuffer<ParticleDataOut> _DataOutputBuffer : register(u2);
RWStructuredBuffer<float3> _AccelerationOutputBuffer : register(u3);

// RWStructuredBuffer<int> _NNBuf : register(u7); // buffer for storing results of nearest neighbor calculations

// The kernel function varies with distance from the center. If xi is the position of particle i and 
//  x is some point in space, r=x-xi is the distance between them.
//TODO: optimizations: branchless, precompute formula, MAD
float Kernel(float r)
{
    // Textbook pg 289
	float rOverS = r * sInv;
	
	// 1 / (pi*s^3)
	//float piFactor = pow(sInv, 3) / 3.1415;
	float piFactor = 1 / (PI * pow(KernelSupport, 3));
    
	if (rOverS < 0 || rOverS > 2)
		return 0;
	else if (rOverS <= 1)
        // Between 0 <= r/s <= 1
		return piFactor * (1 - 1.5 * pow(rOverS, 2) + 0.75 * pow(rOverS, 3));
	else //if (rOverS <= 2)
		// Between 1 <= r/s <= 2
		return piFactor * (0.25 * pow(2 - rOverS, 3));
    
}
float KernelDerivative(float r)
{
	float rOverS = r * sInv;
	float piFactor = 1 / (PI * pow(KernelSupport, 4));

	if (rOverS < 0 || rOverS > 2)
		return 0;
	else if (rOverS <= 1)
        // Between 0 <= r/s <= 1
		return piFactor * 3 * rOverS * mad(0.75, rOverS, -1);
	else //if (rOverS <= 2)
		// Between 1 <= r/s <= 2
		return piFactor * (-0.75 * pow(2 - rOverS, 2));
}
float KernelSecondDerivative(float r)
{
	float rOverS = r * sInv;
	float piFactor = 1 / (PI * pow(KernelSupport, 5));

	if (rOverS < 0 || rOverS > 2)
		return 0;
	else if (rOverS <= 1)
        // Between 0 <= r/s <= 1
		return piFactor * 3 * mad(1.5, rOverS, -1);
	else //if (rOverS <= 2)
		// Between 1 <= r/s <= 2
		return piFactor * mad(1.5, -rOverS, 3); // (3/2)*(2 - rOverS) = 3 - 1.5*rOverS
}

// Don't pass in a zero-vector at risk of NaN! (at length(r) )
float3 KernelGradient(float3 r)
{
	// To get the resulting vector, pass the magnitude of r to KernelDerivative and use the normalized r vector as the direction component
	//	to ensure that the gradient is in exactly the right direction and has exactly the correct magnitude (because it is just based on distance!)
	float rLen = max(0, length(r));
	float3 dir = normalize(r);
	if (any(isnan(dir)))
	{
		// ask for forgiveness, not permission
		dir = float3(0, 0, 0);
	}
	
	float mag = KernelDerivative(rLen);
	return mag * dir;
}

float KernelLaplacian(float3 r)
{
	float rLen = max(0, length(r));
	float mag = KernelSecondDerivative(rLen);
	return mag;
}

/*
uint2 flatTo2D(uint1 val, int w)
{
	return uint2(fmod(val, w), floor(val / w));
}
uint3 flatTo3D(uint1 val, int w, int h)
{
	return uint3(fmod(val, w), fmod(val / w, h), floor(val / (w * h)));
}
*/

//		BUILDING THE NEAREST-NEIGHBOR GRID (https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/2_Concepts_and_Techniques/particles/doc/particles.pdf)
// - supports a variable number of particles by using a two-pass approach. 
// - In the first pass, we count the number of particles per grid cell using an atomic increment 
//   - gridCounters global array: stores the number of particles in each cell (cell idx = array idx)
//
// - We then perform a parallel prefix sum (scan) operation to calculate the destination addresses for each particle (see the �scan� sample in the SDK). 
//
// - In the final pass we examine all the particles again, and write them to contiguous locations in the grid array using the results of the scan.

//TODO: use kernel
// Assign each particle to a grid cell for nearest neighbor
// [numthreads(ThreadGroupSize, 1, 1)]
// void AssignParticlesNN()
// {
	
// }

// //TODO: use kernel
// [numthreads(ThreadGroupSize, 1, 1)]
// void SortParticlesNN()
// {
	
// }



// The computation is organized into separate kernels because each one depends on the completion of the previous. There's no way to wait for all threads
//	to complete, as not all threads are executed simultaneously.

// numthreads(x,y,z) declares that each thread group is a grid of x*y*z threads. A multiple of 64 threads is a good number bc the thread warp size is either 32 or 64 depending on gpu.
[numthreads(ThreadGroupSize, 1, 1)]

// SV_GroupID: 3d ID of this thread group; range depends on Dispatch call
// SV_GroupThreadID: 3d ID of thread in its group; range depends on numthreads
// SV_GroupIndex: the flattened version of SV_GroupThreadID; index of a thread within its group
// SV_DispatchThreadID = SV_GroupID * numthreads + SV_GroupThreadID. For 1d numthreads, id.x represents one unit of calculation (one particle)
void ComputeDensity(uint3 id : SV_DispatchThreadID)
{
	ParticleDataIn thisData = _DataInputBuffer[id.x];
	float3 thisPos = thisData.position;
	
	float thisDensity = 0;
	
	// Loop through all (TODO: nearby) particles to calculate this particle's density
	for (int i = 0; i < _NumParticles; i++)
	{
		if ((uint) i == id.x)
		{
			// Particle i is the particle represented by thisData
			continue;
		}
		
		ParticleDataIn otherData = _DataInputBuffer[i];
		float3 otherPos = otherData.position;

		// distance can potentially be negative because of floating point precision (then kernel should be 0)
		float dist = max(0, distance(thisPos, otherPos));
		
		if (dist * sInv > 2.0f)
		{
			// The particle is far away enough to not matter for the density calculation (r/s > 2)
			continue;
		}
		
		float kernelVal = Kernel(dist);

		// Formula for particle density
		// TODO: theoretically should include temperature here? Makes it super unstable.
		//float thisTemp = thisData.temperature;
		thisDensity += _ParticleMass * kernelVal;// / thisTemp;
	}

	ParticleDataIn newData = thisData;
	newData._density = thisDensity;
	_DataInputBuffer[id.x] = newData;
}

[numthreads(ThreadGroupSize, 1, 1)]
void ComputePGandVL(uint3 id : SV_DispatchThreadID)
{
	// Calculate pressure gradients and the laplacians - these don't rely on each other so they can be done at the same time
	ParticleDataIn thisData = _DataInputBuffer[id.x];
	float3 thisPos = thisData.position;
	float3 thisVel = thisData.velocity;
	float thisTemp = thisData.temperature;
	float thisDensity = thisData._density;
	
	// TODO: theoretically should include temperature here? Makes it super unstable. using the principle of the combined gas law, that pressure is directly proportional to temperature
	float thisPressure = _PressureStiffness * (thisDensity - _ReferenceDensity); // * thisTemp;
	
	float3 resultingPressureGrad = float3(0, 0, 0);
	float3 resultingVelocityDiffusion = float3(0, 0, 0);
	float resultingTempDiffusion = 0;

	[loop]
	for (int i = 0; i < _NumParticles; i++)
	{
		if ((uint) i == id.x)
		{
			// Particle i is the particle represented by thisData
			continue;
		}
		
		////// Pressure gradient
		
		ParticleDataIn otherData = _DataInputBuffer[i];
		float otherDensity = otherData._density;
		float otherTemp = otherData.temperature;
		
		float otherPressure = _PressureStiffness * (otherDensity - _ReferenceDensity);// * otherTemp;
		
		float3 posDifference = thisPos - otherData.position;
		float dist = max(0, length(posDifference));
		
		if (dist * sInv > 2.0f)
		{
			// The particle is far away enough to not matter for the calculation (r/s > 2).
			//	Prevents divide by zero in density calculations just below
			continue;
		}
		
		float3 kernelGrad = KernelGradient(posDifference);
		
		float thisInvDensity = 1 / thisDensity;
		float otherInvDensity = 1 / otherDensity;
		
		float thisPressureOverSquaredDensity = thisPressure * thisInvDensity * thisInvDensity;
		float otherPressureOverSquaredDensity = otherPressure * otherInvDensity * otherInvDensity;

		// Formula for pressure gradient 
		resultingPressureGrad += (thisPressureOverSquaredDensity + otherPressureOverSquaredDensity) * kernelGrad;
		
		////// Diffusion
		
		float kernelLap = KernelLaplacian(posDifference);
		float3 otherVel = otherData.velocity;
		
		// Formula for velocity laplacian
		resultingVelocityDiffusion += (otherVel - thisVel) * thisInvDensity * kernelLap;
		
		
		////// Temperature Diffusion from other to this
		// Calculated essentially in the same way as the formula for velocity. Using the heat equation.
		
		//TODO: temperature momentum (including density)??? Does this make sense? 
		// Regular kernel because just want influence to drop off (and be symmetrical)
		float regularKernel = Kernel(length(posDifference));
		resultingTempDiffusion += (otherTemp - thisTemp) * thisInvDensity * regularKernel;
	}
	
	// Can pull out mass from sums because it's constant
	float3 pressureGradient = _ParticleMass * resultingPressureGrad;
	float3 diffusion = _Viscosity * _ParticleMass * resultingVelocityDiffusion;
	float temperatureDiffusion = _HeatDiffusionRate * _ParticleMass * resultingTempDiffusion;

	ParticleDataIn newData = thisData;
	newData._pressureGradient = pressureGradient;
	newData._diffusion = diffusion;
	newData._temperatureDiffusion = temperatureDiffusion;
	_DataInputBuffer[id.x] = newData;
}

// Clamp given float3 to have length at most MaxParticleSpeed
float3 SpeedLimit(float3 v)
{
	float mag = max(0, length(v));
	// HLSL sometimes has an issue with intermittent returns, so use result variable instead
	float3 result = float3(0, 0, 0);
	if (mag > FLOAT_EPSILON)	// Prevent normalize divide by zero
	{
		float3 norm = saturate(normalize(v));
		float newMag = min(mag, MaxParticleSpeed);
		result = newMag * norm;
	}
	return result;
}

[numthreads(ThreadGroupSize, 1, 1)]
void ComputePosAndVel(uint3 id : SV_DispatchThreadID, uint groupIdx : SV_GroupIndex, uint3 gid : SV_GroupID)
{
	ParticleDataIn oldData = _DataInputBuffer[id.x];

	float3 thisPG = oldData._pressureGradient;
	float3 thisVL = oldData._diffusion;
	float thisTempDiffusion = oldData._temperatureDiffusion;
	
	// Use symplectic euler to update position and velocity
	float3 oldPos = oldData.position;
	float3 oldVel = oldData.velocity;
	float oldTemp = oldData.temperature;
	
	// Temperature diffusion buffer stores the change in temperature per particle
	float newTemp = oldTemp + thisTempDiffusion;
	
	// Influence of heat (simple!! Not necessarily physically based!) Converted to accel
	float3 buoyancy = -float3(0, 9.81, 0) / _ParticleMass * (_AmbientTemperature - newTemp) / newTemp;
	
	float3 acceleration = -thisPG + thisVL + buoyancy + _ExternalAccelerations;
	
	//TODO: Instead of ambient temperature used kernel of nearby temps??? Solenthaler 2007 eqn 21!!!
	//TODO: Easy smoke by adding a flag to particles to tell whether theyve been inside a heat source, and if so, when they cool off they should be rendered as smoke
	
	// Symplectic euler with a = F/m
	float3 newVel = oldVel + acceleration * Timestep;
	float3 newPos = oldPos + newVel * Timestep;

	ParticleDataOut data;
	data.position = newPos;
	data.velocity = SpeedLimit(newVel);
	data.temperature = newTemp;
	
	_DataOutputBuffer[id.x] = data;
}